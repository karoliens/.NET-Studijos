// <auto-generated />
using System;
using Final_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Migrations
{
    [DbContext(typeof(RepairShopContext))]
    [Migration("20230109183210_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Final_Project.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfRepair")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            CreateDateTime = new DateTime(2023, 1, 9, 20, 32, 10, 540, DateTimeKind.Local).AddTicks(9635),
                            Description = "",
                            Email = "karoliens@gmail.com",
                            PhoneNumber = "",
                            TypeOfRepair = "Repair",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TicketId = 2,
                            CreateDateTime = new DateTime(2023, 1, 9, 20, 32, 10, 540, DateTimeKind.Local).AddTicks(9670),
                            Description = "",
                            Email = "ievuzis@gmail.com",
                            PhoneNumber = "",
                            TypeOfRepair = "Data Recovery",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TicketId = 3,
                            CreateDateTime = new DateTime(2023, 1, 9, 20, 32, 10, 540, DateTimeKind.Local).AddTicks(9672),
                            Description = "",
                            Email = "tomukas@gmail.com",
                            PhoneNumber = "",
                            TypeOfRepair = "Repair",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TicketId = 4,
                            CreateDateTime = new DateTime(2023, 1, 9, 20, 32, 10, 540, DateTimeKind.Local).AddTicks(9673),
                            Description = "",
                            Email = "sauliens@gmail.com",
                            PhoneNumber = "",
                            TypeOfRepair = "Repair",
                            UpdateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Final_Project.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Karolis",
                            TicketId = 1,
                            UserName = "karoliens"
                        },
                        new
                        {
                            UserId = 2,
                            Name = "Ieva",
                            TicketId = 2,
                            UserName = "ievuzis"
                        },
                        new
                        {
                            UserId = 3,
                            Name = "Tomas",
                            TicketId = 3,
                            UserName = "tomukas"
                        },
                        new
                        {
                            UserId = 4,
                            Name = "Saulius",
                            TicketId = 4,
                            UserName = "sauliens"
                        });
                });

            modelBuilder.Entity("Final_Project.Models.Ticket", b =>
                {
                    b.HasOne("Final_Project.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final_Project.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
